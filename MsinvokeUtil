package cn.csg.zt.cmpt.msinvoke.util;

import java.util.ArrayList;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import org.apache.commons.lang.StringUtils;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;

import cn.csg.zt.cmpt.msinvoke.config.MsinvokeAppConfig;
import cn.csg.zt.cmpt.msinvoke.constants.MsinvokeDataConstants;
import lombok.extern.slf4j.Slf4j;

/**
 * 调用组件工具类
 *
 */
@Slf4j
public class MsinvokeUtil {

	/**
	 * 校验基本请求头和自定义请求头
	 * 
	 * @param headers
	 *            请求头
	 * @throws Exception
	 *             自定义异常
	 */
	public static void checkBaseHeader(HttpHeaders headers) throws Exception {
		if ("true".equals(MsinvokeAppConfig.getProperty(MsinvokeDataConstants.GET_REQUEST_HEADER_VALID_KEY, "false"))) {
			checkHeader(headers, MsinvokeDataConstants.DXSPANID, "spanId为空!");
			checkHeader(headers, MsinvokeDataConstants.DXTRANSID, "交易标识为空!");
			checkHeader(headers, MsinvokeDataConstants.DXTOKEN, "TOKEN为空!");
			checkHeader(headers, MsinvokeDataConstants.DXTOKENTM, "调用发起时间为空!");
			checkHeader(headers, MsinvokeDataConstants.MSCALLER, "调用服务名为空!");
		}
		String customKey = MsinvokeAppConfig.getProperty(MsinvokeDataConstants.GET_CUSTOM_REQUEST_HREADER_KEY);
		if (!org.springframework.util.StringUtils.isEmpty(customKey)) {
			String[] keyArray = customKey.split(",");
			for (String key : keyArray) {
				checkHeader(headers, key, key + "为空");
			}
		}
	}

	/**
	 * 校验基本请求头和自定义请求头
	 * 
	 * @param headers
	 *            请求头
	 * @throws Exception
	 *             自定义异常
	 */
	public static void checkBaseHeader(HttpEntity<?> requestEntity) throws Exception {
		HttpHeaders headers = requestEntity.getHeaders();
		checkBaseHeader(headers);
	}

	/**
	 * 校验基本请求头
	 * 
	 * @param headers
	 *            请求头
	 * @param headerKey
	 *            需要校验的key
	 * @param exceptionMsg
	 *            异常提示内容
	 * @throws Exception
	 *             自定义异常
	 */
	public static void checkHeader(HttpHeaders headers, String headerKey, String exceptionMsg) throws Exception {
		List<String> keyList = headers.get(headerKey);
		if (keyList == null || keyList.isEmpty() || StringUtils.isEmpty(keyList.get(0))) {
			throw new Exception(exceptionMsg);
		}
	}

	/**
	 * 校验调用名称是否携带请求协议头
	 * 
	 * @param serviceName
	 * @return
	 */
	public static boolean checkProtocolHeader(String serviceName) {
		String serName = serviceName.toLowerCase();
		if (serName.indexOf("http://") != -1 || serName.indexOf("https://") != -1) {
			return true;
		}
		return false;
	}

	/**
	 * 校验被调用服务是否与本服务网关关系
	 * 
	 * @param serviceName
	 *            被调用服务名称
	 * @return 1 同网关 ,2 内外网, 3非本网关
	 */
	public static int checkGateway(String serviceName) {
		// 当前微服务名称
		String mscaller = MsinvokeAppConfig.getProperty(MsinvokeDataConstants.GET_MSCALLER_KEY);
		// 当前微服务无法区分默认按同网关处理
		String mscallerFlag = idcOrDmz(mscaller);
		if (mscallerFlag == null) {
			log.info("#checkGateway# 当前微服务名称无法获取服务区域--默认按同网关处理 ");
			return 1;
		}
		// 被调用微服务无法区分默认按非本网关处理
		String serviceFlag = idcOrDmz(serviceName);
		if (serviceFlag == null) {
			log.info("#checkGateway# 被调用微服务名称无法获取服务区域--默认按同网关处理 ");
			return 3;
		}
		log.info("#checkGateway# mscallerFlag:" + mscallerFlag + " serviceFlag:" + serviceFlag);
		if (mscallerFlag.equals(serviceFlag)) {
			return 1;
		} else {
			return 2;
		}
	}

	/**
	 * 判断服务名处于idc还是dmz
	 * 
	 * @param serviceName
	 * @return
	 */
	public static String idcOrDmz(String serviceName) {
		if (serviceName == null) {
			return null;
		}
		int dmzFlag = serviceName.toLowerCase().indexOf(MsinvokeDataConstants.DMZ);
		int idcFlag = serviceName.toLowerCase().indexOf(MsinvokeDataConstants.IDC);
		if (dmzFlag > 0)
			return MsinvokeDataConstants.DMZ;
		if (idcFlag > 0)
			return MsinvokeDataConstants.IDC;
		return null;
	}

	/**
	 * 根据url返回服务名
	 */
	public static String urlGetServiceName(String url) {
		String regex = "^((http://)|(https://))?.*/";
		Pattern pattern = Pattern.compile(regex);
		Matcher matcher = pattern.matcher(url);
		if (matcher.find()) {
			String url2 = matcher.group(0);
			return url2.replaceAll("^((http://)|(https://))", "").split("/")[0];
		}
		return null;
	}

	/**
	 * 根据url判断是否ip地址
	 * 
	 * @param url
	 * @return
	 */
	public static boolean isIpAddress(String url) {
		String ip = urlGetServiceName(url);
		if (ip == null)
			return false;
		String regex = "^(2(5[0-5]{1}|[0-4]\\d{1})|[0-1]?\\d{1,2})(\\.(2(5[0-5]{1}|[0-4]\\d{1})|[0-1]?\\d{1,2})){3}$";
		String regex2 = "^(2(5[0-5]{1}|[0-4]\\d{1})|[0-1]?\\d{1,2})(\\.(2(5[0-5]{1}|[0-4]\\d{1})|[0-1]?\\d{1,2})){3}:([0-9]|[1-9]\\d|[1-9]\\d{2}|[1-9]\\d{3}|[1-5]\\d{4}|6[0-4]\\d{3}|65[0-4]\\d{2}|655[0-2]\\d|6553[0-5])$";
		return ip.matches(regex) ? true : ip.matches(regex2);
	}

	/**
	 * 请求头获取cookie列表
	 * 
	 * @param headers
	 * @return
	 */
	public static List<String> getCookie(HttpHeaders headers) {
		List<String> list = headers.get(HttpHeaders.COOKIE);
		//return list == null ? new ArrayList<>() : list;
		 return list;
	}

	/**
	 * 从请求头获取cookie的指定值
	 * 
	 * @param headers
	 * @param key
	 * @return
	 */
	public static String getCookieValue(HttpHeaders headers, String key) {
		List<String> cookies = getCookie(headers);
		for (String v : cookies) {
			int i = v.lastIndexOf("=") - 1;
			String k = v.substring(0, i - 1);
			String val = v.substring(i);
			if (k.equals(key)) {
				return val;
			}
		}
		return null;
	}

	public static HttpHeaders setCookie(HttpHeaders headers, List<String> cookie) {
		if (headers == null) {
			headers = new HttpHeaders();
		}
		headers.put(HttpHeaders.COOKIE, cookie);
		return headers;
	}

	public static void main(String[] args) {

	}

}
